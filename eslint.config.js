import js from '@eslint/js';
import tseslint from 'typescript-eslint';
import eslintPluginNoNull from 'eslint-plugin-no-null';
import eslintPluginPrettier from 'eslint-plugin-prettier';
import eslintPluginUnusedImports from 'eslint-plugin-unused-imports';

export default tseslint.config(
	{
		ignores: [
			'config/**/*.json',
			'coverage/*',
			'node_modules/',
			'package.json',
			'package-lock.json',
			'README.md',
			'CHANGELOG.md',
			'.prettierignore',
			'docker-compose.yml',
			'patches/*',
			'webpack.config.js',
			'helm/*',
			'tsconfig.json',
			'.depcheckrc.json',
			'dist/**/*',
			'build/**/*',
			'*.min.js',
			'**/*.json',
			'eslint.config.js',
		],
	},
	js.configs.recommended,
	...tseslint.configs.recommended,
	{
		languageOptions: {
			ecmaVersion: 'latest',
			sourceType: 'module',
			parser: tseslint.parser,
			parserOptions: {
				project: ['./tsconfig.json'],
				tsconfigRootDir: '.',
			},
			globals: {
				browser: 'readonly',
				node: 'readonly',
			},
		},
		plugins: {
			'@typescript-eslint': tseslint.plugin,
			'no-null': eslintPluginNoNull,
			prettier: eslintPluginPrettier,
			'unused-imports': eslintPluginUnusedImports,
		},
		rules: {
			'@typescript-eslint/dot-notation': 'error',
			'@typescript-eslint/no-empty-function': 'error',
			'@typescript-eslint/no-explicit-any': 'off',
			'@typescript-eslint/no-inferrable-types': 'off',
			'@typescript-eslint/no-require-imports': 'off',
			'@typescript-eslint/no-shadow': [
				'error',
				{
					hoist: 'all',
				},
			],
			'@typescript-eslint/no-unused-expressions': 'error',
			'@typescript-eslint/no-var-requires': 'off',
			'@typescript-eslint/prefer-namespace-keyword': 'error',
			'@typescript-eslint/quotes': 'off',
			'@typescript-eslint/typedef': [
				'error',
				{
					propertyDeclaration: true,
					memberVariableDeclaration: true,
					variableDeclarationIgnoreFunction: true,
				},
			],
			'@typescript-eslint/prefer-literal-enum-member': 'error',
			'@typescript-eslint/prefer-enum-initializers': 'error',
			'@typescript-eslint/no-floating-promises': 'warn',
			curly: 'error',
			'default-case': 'error',
			'dot-notation': 'off',
			eqeqeq: ['error', 'smart'],
			'id-denylist': ['off', 'any', 'Number', 'number', 'String', 'string', 'Boolean', 'boolean', 'Undefined', 'undefined'],
			'id-match': 'off',
			'no-bitwise': 'error',
			'no-caller': 'error',
			'no-console': 'off',
			'no-debugger': 'error',
			'no-empty': 'error',
			'no-empty-function': 'off',
			'no-eval': 'error',
			'no-fallthrough': 'off',
			'no-new-wrappers': 'error',
			'no-null/no-null': 'off',
			'no-underscore-dangle': 'off',
			'no-unused-expressions': 'off',
			'no-unused-labels': 'error',
			'no-var': 'error',
			'no-duplicate-imports': 'error',
			radix: 'off',
			'prettier/prettier': ['error'],
			'unused-imports/no-unused-imports': 'error',
			'unused-imports/no-unused-vars': [
				'warn',
				{
					vars: 'all',
					varsIgnorePattern: '^_',
					args: 'after-used',
					argsIgnorePattern: '^_',
				},
			],
			'max-len': ['error', { code: 140 }],
			indent: ['error', 'tab'],
			'@typescript-eslint/member-ordering': [
				'error',
				{
					default: [
						'public-static-field',
						'private-static-field',
						'public-instance-field',
						'private-instance-field',
						'constructor',
						'public-static-method',
						'private-static-method',
						'public-instance-method',
						'private-instance-method',
					],
				},
			],
			'comma-dangle': [
				'error',
				{
					arrays: 'always-multiline',
					objects: 'always-multiline',
					imports: 'always-multiline',
					exports: 'always-multiline',
					functions: 'always-multiline',
				},
			],
			'capitalized-comments': ['error', 'always'],
		},
	},
);
